from flask import Blueprint, render_template, g, request, flash, session, current_app
import time

from cetic_recsys.db import get_papers_from_db
from cetic_recsys.rank import get_rank
from cetic_recsys.utilities import format_papers, update_session

bp = Blueprint('exploit', __name__)


@bp.route('/show')
def show():
    if session['recommend_results']:
        papers = get_papers_from_db(session['recommend_results'])
    else:
        papers = []
        flash('no results', category='error')

    return render_template('exploit.html', papers=format_papers(papers), rank_weights=session['rank_weights'])


@bp.route('/add_from_exploit', methods=['POST'])
def add():
    current_app.logger.debug('request.form ' + str(request.form))

    if 'id' in request.form:
        new_inputs = []
        for e in request.form.getlist('id'):
            new_inputs.append(e)
        update_session(session, 'recommend_inputs', session['recommend_inputs'] + new_inputs)
        flash(str(len(new_inputs)) + ' inputs added', category='success')
    else:
        flash('no input added', category='error')

    papers = get_papers_from_db(session['recommend_results'])

    return render_template('exploit.html', papers=format_papers(papers), rank_weights=session['rank_weights'])


@bp.route('/save_from_exploit', methods=['POST'])
def save():
    current_app.logger.debug('request.form ' + str(request.form))

    if 'id' in request.form:
        new_saves = []
        for e in request.form.getlist('id'):
            new_saves.append(e)
        update_session(session, 'save_results', session['save_results'] + new_saves)
        flash(str(len(new_saves)) + ' papers saved', category='success')
    else:
        flash('no paper saved', category='error')

    papers = get_papers_from_db(session['recommend_results'])

    return render_template('exploit.html', papers=format_papers(papers), rank_weights=session['rank_weights'])


@bp.route('/delete_from_exploit', methods=['POST'])
def delete():
    current_app.logger.debug('request.form ' + str(request.form))

    if 'id' in request.form:
        paper_ids_to_del = set([int(paper_id) for paper_id in request.form.getlist('id')])
        recommend_results = [paper_id for paper_id in session['recommend_results']
                             if paper_id not in paper_ids_to_del]
        update_session(session, 'recommend_results', recommend_results)
        flash(str(len(paper_ids_to_del)) + ' papers deleted from exploit', category='success')
    else:
        flash('no paper deleted from exploit', category='error')

    papers = get_papers_from_db(session['recommend_results'])

    return render_template('exploit.html', papers=format_papers(papers), rank_weights=session['rank_weights'])


@bp.route('/rank', methods=['POST'])
def rank():
    current_app.logger.debug('request.form ' + str(request.form))

    update_session(session, 'rank_weights', request.form)

    if session['recommend_inputs'] and session['recommend_results']:
        start_time = time.time()
        recommend_results = get_rank(session['recommend_inputs'], session['recommend_results'], session['rank_weights'])
        update_session(session, 'recommend_results', recommend_results)
        flash('papers ranked in {0:.2f} s'.format(time.time() - start_time), category='success')
    elif not session['recommend_results']:
        flash('unable to rank papers because no recommend result', category='error')
    elif not session['recommend_inputs']:
        flash('unable to rank papers because no recommend input', category='error')

    papers = get_papers_from_db(session['recommend_results'])

    return render_template('exploit.html', papers=format_papers(papers), rank_weights=session['rank_weights'])
